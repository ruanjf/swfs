<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	   xmlns:context="http://www.springframework.org/schema/context"
	   xmlns:tx="http://www.springframework.org/schema/tx"
	   xmlns:mvc="http://www.springframework.org/schema/mvc"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
           http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
           http://www.springframework.org/schema/tx
		   http://www.springframework.org/schema/tx/spring-tx.xsd">
		   
	<bean id="propertyConfigurer" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">      
    	<property name="location" value="/WEB-INF/database.properties"/>      
	</bean>
	
	<!--     <bean id = "oracleDataSource" class = "org.springframework.jdbc.datasource.DriverManagerDataSource"
             destroy-method = "close">
	    <property name = "driverClassName" value = "oracle.jdbc.driver.OracleDriver" />
	    <property name = "url" value = "jdbc:oracle:thin:@localhost:1521:WebLog" />
	    <property name = "username" value = "root" />
	    <property name = "password" value = "root" />
    </bean> -->
    
    <bean id = "dataSource" class = "org.springframework.jdbc.datasource.DriverManagerDataSource">
	    <property name = "driverClassName" value = "${jdbc.driverClassName}" />
	    <property name = "url" value = "${jdbc.url}" />
	    <property name = "username" value = "${jdbc.username}" />
	    <property name = "password" value = "${jdbc.password}" />
    </bean>
	
	<bean id = "sessionFactory"
	         class = "org.springframework.orm.hibernate3.annotation.AnnotationSessionFactoryBean">
	    <property name = "dataSource" ref = "dataSource" />
	    <property name = "packagesToScan">
	        <list>
	              <value>com.ruanjf.springMVC.persistent.**</value>
	              <!-- 一个星号和两个星号有区别 -->
	        </list>
	    </property>
	    <property name = "hibernateProperties">
	    	<value>
        		hibernate.dialect=${hibernate.dialect}
      			hibernate.hbm2ddl.auto=${hibernate.hbm2ddl.auto}
      			hibernate.show_sql=${hibernate.show_sql}
      			hibernate.format_sql=${hibernate.format_sql}
      			hibernate.connection.release_mode=${hibernate.connection.release_mode}
      		</value>
	        <!-- <props>
	              <prop key="hibernate.dialect">org.hibernate.dialect.MySQLDialect</prop>
	              <prop key="hibernate.hbm2ddl.auto">update</prop>
	              <prop key="hibernate.show_sql">true</prop>
	              <prop key="hibernate.format_sql">basic</prop>
	              <prop key="hibernate.connection.release_mode">after_transaction</prop>
	        </props> -->
	    </property>
	</bean>
	
	<!-- 定义JdbcTemplate Bean(线程安全,执行底层sql语句) -->
	<bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
		<!-- 设置数据源 -->
		<property name="dataSource" ref="dataSource" />

		<!-- 设置jdbcTemplate创建的statement查询数据时最大的超时时间,默认0 -->
		<property name="queryTimeout" value="0" />

		<!-- 设置底层ResultSet每次从数据库返回的行数,默认0,Oracle默认100 -->
		<property name="fetchSize" value="100" />

		<!-- 设置底层ResultSet从数据库返回的最大行数,默认0 -->
		<property name="maxRows" value="0" />

		<!-- 是否忽略sql警告信息,默认true,false JdbcTemplate将会抛出SQLWarningException -->
		<property name="ignoreWarnings" value="true" />

		<property name="nativeJdbcExtractor" ref="nativeJdbcExtractor" />
	</bean>
	
	<!-- 定义DBCP数据源的JDBC本地对象抽取器 -->
	<bean id="nativeJdbcExtractor" lazy-init="true"
		class="org.springframework.jdbc.support.nativejdbc.CommonsDbcpNativeJdbcExtractor" />
		
		<!-- 定义封装了jdbc操作数据的dao -->
	<bean id="simpleJdbcDao" class="com.ruanjf.springMVC.dao.jdbc.SimpleJdbcDao">
		<property name="jdbcTemplate" ref="jdbcTemplate" />
	</bean>
	
		<!-- 定义了与实体相关的dao -->
	<bean id="genericEntityDao" class="com.ruanjf.springMVC.dao.hibernate.GenericEntityDao"
		scope="prototype">
		<property name="sessionFactory">
			<ref bean="sessionFactory" />
		</property>
	</bean>

	<!-- 定义了与实体无关的dao -->
	<bean id="genericDao" class="com.ruanjf.springMVC.dao.hibernate.GenericDao">
		<property name="sessionFactory">
			<ref bean="sessionFactory" />
		</property>
	</bean>
	
	<!-- 使用泛型DAO作为抽象基类 -->
	<!-- <bean id="baseDao" class="com.ruanjf.springMVC.dao.base.BaseDao"
		 depends-on="genericEntityDao,genericDao" scope="prototype">
		<property name="genericEntityDao">
			<ref bean="genericEntityDao" />
		</property>
		<property name="genericDao">
			<ref bean="genericDao" />
		</property>
		<property name="simpleJdbcDao">
		    <ref bean="simpleJdbcDao"/>
		</property>
	</bean> -->
	
	<!-- 事务管理配置 -->
	<bean id="txManager"
		class="org.springframework.orm.hibernate3.HibernateTransactionManager">
		<property name="sessionFactory" ref="sessionFactory" />
	</bean>
	<!-- 基于注解的声明式事务管理 -->
	<tx:annotation-driven transaction-manager="txManager" />
	
	<import resource="securityContext.xml"/>
	
</beans>
